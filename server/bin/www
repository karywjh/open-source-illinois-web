#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('open-source-api:server');
var http = require('http');
var https = require('https');
var environment = require('../config/environment');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log(process.cwd());

/**
 * Create HTTP/HTTPS server 
 *  HTTP -- development
 *  HTTPS -- production
 */
if(environment.production){
  const credentials = {
    key: fs.readFileSync(__dirname+'\\..\\key.pem'),
    cert: fs.readFileSync(__dirname+'\\..\\cert.pem')
  }
  var server = https.createServer(credentials, app);
}
else{
  var server = http.createServer(app);
}

//Set up app -- production

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log('Listening on port '+port));
server.on('error', onError);
server.on('listening', onListening);
// server.on('request', (req, res) => {
//   console.log('Someone has connected');
//   console.log(req.headers);
//   // console.log(bodyParser.json(res.body));
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
